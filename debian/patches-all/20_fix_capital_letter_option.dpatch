#! /bin/sh /usr/share/dpatch/dpatch-run
## 20_fix_capital_letter_option.dpatch by Jose Carlos Medeiros <debian@psabs.com.br>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Allow check to Capital letter options.

# configuration parsing / documentation omission
# http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=358764
# From: Frank IJskes <frank@debbie.xs4all.nl>
#
# This patch solved problem that happen when you put option that has
# Yes with parameter. Webalizer now check if option is "Y" or "y", "N" and "n".

@DPATCH@
Index: webalizer-2.01.10-vc/webalizer.c
===================================================================
--- webalizer-2.01.10-vc.orig/webalizer.c	2006-10-27 12:38:48.000000000 +0400
+++ webalizer-2.01.10-vc/webalizer.c	2006-10-27 12:38:49.000000000 +0400
@@ -1659,12 +1659,12 @@
         case 2:  log_fname=save_opt(value);        break; /* LogFile        */
         case 3:  msg_title=save_opt(value);        break; /* ReportTitle    */
         case 4:  hname=save_opt(value);            break; /* HostName       */
-        case 5:  ignore_hist=(value[0]=='n')?0:1;  break; /* IgnoreHist     */
-        case 6:  verbose=(value[0]=='n')?2:1;      break; /* Quiet          */
-        case 7:  time_me=(value[0]=='n')?0:1;      break; /* TimeMe         */
-        case 8:  debug_mode=(value[0]=='n')?0:1;   break; /* Debug          */
-        case 9:  hourly_graph=(value[0]=='n')?0:1; break; /* HourlyGraph    */
-        case 10: hourly_stats=(value[0]=='n')?0:1; break; /* HourlyStats    */
+        case 5:  ignore_hist=(value[0]=='n'||value[0]=='N')?0:1;  break; /* IgnoreHist     */
+        case 6:  verbose=(value[0]=='n'||value[0]=='N')?2:1;      break; /* Quiet          */
+        case 7:  time_me=(value[0]=='n'||value[0]=='N')?0:1;      break; /* TimeMe         */
+        case 8:  debug_mode=(value[0]=='n'||value[0]=='N')?0:1;   break; /* Debug          */
+        case 9:  hourly_graph=(value[0]=='n'||value[0]=='N')?0:1; break; /* HourlyGraph    */
+        case 10: hourly_stats=(value[0]=='n'||value[0]=='N')?0:1; break; /* HourlyStats    */
         case 11: ntop_sites = atoi(value);         break; /* TopSites       */
         case 12: ntop_urls = atoi(value);          break; /* TopURLs        */
         case 13: ntop_refs = atoi(value);          break; /* TopRefs        */
@@ -1683,50 +1683,50 @@
         case 26: add_nlist(value,&ignored_urls);   break; /* IgnoreURL      */
         case 27: add_nlist(value,&ignored_refs);   break; /* IgnoreReferrer */
         case 28: add_nlist(value,&ignored_agents); break; /* IgnoreAgent    */
-        case 29: if (value[0]=='y') verbose=0;     break; /* ReallyQuiet    */
-        case 30: local_time=(value[0]=='y')?0:1;   break; /* GMTTime        */
+        case 29: if (value[0]=='y'||value[0]=='Y') verbose=0;     break; /* ReallyQuiet    */
+        case 30: local_time=(value[0]=='y'||value[0]=='Y')?0:1;   break; /* GMTTime        */
         case 31: add_glist(value,&group_urls);     break; /* GroupURL       */
         case 32: add_glist(value,&group_sites);    break; /* GroupSite      */
         case 33: add_glist(value,&group_refs);     break; /* GroupReferrer  */
         case 34: add_glist(value,&group_agents);   break; /* GroupAgent     */
-        case 35: shade_groups=(value[0]=='y')?1:0; break; /* GroupShading   */
-        case 36: hlite_groups=(value[0]=='y')?1:0; break; /* GroupHighlight */
-        case 37: incremental=(value[0]=='y')?1:0;  break; /* Incremental    */
+        case 35: shade_groups=(value[0]=='y'||value[0]=='Y')?1:0; break; /* GroupShading   */
+        case 36: hlite_groups=(value[0]=='y'||value[0]=='Y')?1:0; break; /* GroupHighlight */
+        case 37: incremental=(value[0]=='y'||value[0]=='Y')?1:0;  break; /* Incremental    */
         case 38: state_fname=save_opt(value);      break; /* State FName    */
         case 39: hist_fname=save_opt(value);       break; /* History FName  */
         case 40: html_ext=save_opt(value);         break; /* HTML extension */
         case 41: add_nlist(value,&html_pre);       break; /* HTML Pre code  */
         case 42: add_nlist(value,&html_body);      break; /* HTML Body code */
         case 43: add_nlist(value,&html_end);       break; /* HTML End code  */
-        case 44: use_https=(value[0]=='y')?1:0;    break; /* Use https://   */
+        case 44: use_https=(value[0]=='y'||value[0]=='Y')?1:0;    break; /* Use https://   */
         case 45: add_nlist(value,&include_sites);  break; /* IncludeSite    */
         case 46: add_nlist(value,&include_urls);   break; /* IncludeURL     */
         case 47: add_nlist(value,&include_refs);   break; /* IncludeReferrer*/
         case 48: add_nlist(value,&include_agents); break; /* IncludeAgent   */
         case 49: add_nlist(value,&page_type);      break; /* PageType       */
         case 50: visit_timeout=atoi(value);        break; /* VisitTimeout   */
-        case 51: graph_legend=(value[0]=='y')?1:0; break; /* GraphLegend    */
+        case 51: graph_legend=(value[0]=='y'||value[0]=='Y')?1:0; break; /* GraphLegend    */
         case 52: graph_lines = atoi(value);        break; /* GraphLines     */
-        case 53: fold_seq_err=(value[0]=='y')?1:0; break; /* FoldSeqErr     */
-        case 54: ctry_graph=(value[0]=='y')?1:0;   break; /* CountryGraph   */
+        case 53: fold_seq_err=(value[0]=='y'||value[0]=='Y')?1:0; break; /* FoldSeqErr     */
+        case 54: ctry_graph=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* CountryGraph   */
         case 55: ntop_sitesK = atoi(value);        break; /* TopKSites (KB) */
         case 56: ntop_urlsK  = atoi(value);        break; /* TopKUrls (KB)  */
         case 57: ntop_entry  = atoi(value);        break; /* Top Entry pgs  */
         case 58: ntop_exit   = atoi(value);        break; /* Top Exit pages */
         case 59: ntop_search = atoi(value);        break; /* Top Search pgs */
-        case 60: log_type=(value[0]=='f')?
-                 LOG_FTP:((value[0]=='s')?
-                 LOG_SQUID:((value[0]=='w')?
+        case 60: log_type=(value[0]=='f'||value[0]=='F')?
+                 LOG_FTP:((value[0]=='s'||value[0]=='S')?
+                 LOG_SQUID:((value[0]=='w'||value[0]=='W')?
                  LOG_W3C:LOG_CLF));                break; /* LogType        */
         case 61: add_glist(value,&search_list);    break; /* SearchEngine   */
         case 62: group_domains=atoi(value);        break; /* GroupDomains   */
-        case 63: hide_sites=(value[0]=='y')?1:0;   break; /* HideAllSites   */
-        case 64: all_sites=(value[0]=='y')?1:0;    break; /* All Sites?     */
-        case 65: all_urls=(value[0]=='y')?1:0;     break; /* All URL's?     */
-        case 66: all_refs=(value[0]=='y')?1:0;     break; /* All Refs       */
-        case 67: all_agents=(value[0]=='y')?1:0;   break; /* All Agents?    */
-        case 68: all_search=(value[0]=='y')?1:0;   break; /* All Srch str   */
-        case 69: all_users=(value[0]=='y')?1:0;    break; /* All Users?     */
+        case 63: hide_sites=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* HideAllSites   */
+        case 64: all_sites=(value[0]=='y'||value[0]=='Y')?1:0;    break; /* All Sites?     */
+        case 65: all_urls=(value[0]=='y'||value[0]=='Y')?1:0;     break; /* All URL's?     */
+        case 66: all_refs=(value[0]=='y'||value[0]=='Y')?1:0;     break; /* All Refs       */
+        case 67: all_agents=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* All Agents?    */
+        case 68: all_search=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* All Srch str   */
+        case 69: all_users=(value[0]=='y'||value[0]=='Y')?1:0;    break; /* All Users?     */
         case 70: ntop_users=atoi(value);           break; /* TopUsers       */
         case 71: add_nlist(value,&hidden_users);   break; /* HideUser       */
         case 72: add_nlist(value,&ignored_users);  break; /* IgnoreUser     */
@@ -1734,13 +1734,13 @@
         case 74: add_glist(value,&group_users);    break; /* GroupUser      */
         case 75: dump_path=save_opt(value);        break; /* DumpPath       */
         case 76: dump_ext=save_opt(value);         break; /* Dumpfile ext   */
-        case 77: dump_header=(value[0]=='y')?1:0;  break; /* DumpHeader?    */
-        case 78: dump_sites=(value[0]=='y')?1:0;   break; /* DumpSites?     */
-        case 79: dump_urls=(value[0]=='y')?1:0;    break; /* DumpURLs?      */
-        case 80: dump_refs=(value[0]=='y')?1:0;    break; /* DumpReferrers? */
-        case 81: dump_agents=(value[0]=='y')?1:0;  break; /* DumpAgents?    */
-        case 82: dump_users=(value[0]=='y')?1:0;   break; /* DumpUsers?     */
-        case 83: dump_search=(value[0]=='y')?1:0;  break; /* DumpSrchStrs?  */
+        case 77: dump_header=(value[0]=='y'||value[0]=='Y')?1:0;  break; /* DumpHeader?    */
+        case 78: dump_sites=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* DumpSites?     */
+        case 79: dump_urls=(value[0]=='y'||value[0]=='Y')?1:0;    break; /* DumpURLs?      */
+        case 80: dump_refs=(value[0]=='y'||value[0]=='Y')?1:0;    break; /* DumpReferrers? */
+        case 81: dump_agents=(value[0]=='y'||value[0]=='Y')?1:0;  break; /* DumpAgents?    */
+        case 82: dump_users=(value[0]=='y'||value[0]=='Y')?1:0;   break; /* DumpUsers?     */
+        case 83: dump_search=(value[0]=='y'||value[0]=='Y')?1:0;  break; /* DumpSrchStrs?  */
 #ifdef USE_DNS
         case 84: dns_cache=save_opt(value);        break; /* DNSCache fname */
         case 85: dns_children=atoi(value);         break; /* DNSChildren    */
@@ -1748,10 +1748,10 @@
         case 84: /* Disable DNSCache and DNSChildren if DNS is not enabled  */
         case 85: printf("%s '%s' (%s)\n",_("Warning: Invalid keyword"),keyword,fname); break;
 #endif  /* USE_DNS */
-        case 86: daily_graph=(value[0]=='n')?0:1; break;  /* HourlyGraph    */
-        case 87: daily_stats=(value[0]=='n')?0:1; break;  /* HourlyStats    */
+        case 86: daily_graph=(value[0]=='n'||value[0]=='N')?0:1; break;  /* HourlyGraph    */
+        case 87: daily_stats=(value[0]=='n'||value[0]=='N')?0:1; break;  /* HourlyStats    */
 #ifdef USE_GEOIP
-        case 88: use_geoip=(value[0]=='n')?0:1; break;    /* GeoIP          */
+        case 88: use_geoip=(value[0]=='n'||value[0]=='N')?0:1; break;    /* GeoIP          */
         case 89: geoip_dbase=save_opt(value); break;      /* GeoIPDatabase  */
 #endif	/* USE_GEOIP */
          case 90: strncpy(hit_color+1,value,6);break;
